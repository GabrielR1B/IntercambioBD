import pandas as pd
import streamlit as st

# Importando os dados
dados = pd.read_csv('Universidades_Geral.csv')

# T√≠tulo da p√°gina
st.title('Banco de Dados: Interc√¢mbio-UFMG ‚úàÔ∏è')
st.write('Banco de Dados Criado para facilitar a procura e pesquisa de informa√ß√µes envolvendo interc√¢mbios pela UFMG.')
st.write('Esse Banco de Dados cont√©m informa√ß√µes sobre todas as universidades que ofereceram vagas para interc√¢mbio pela UFMG desde 2024. O intuito desse banco √© auxiliar no processo de pesquisa de uma universidade ideal para os alunos.')
st.write("## ‚ö†Ô∏è ATEN√á√ÉO: Esse n√£o √© um Banco de Dados de vagas que est√£o sendo oferecidas mas de universidades que ne algum momento ja ofereceram vagas, para encontrar o quadro de vagas de intercambio atual consulte o site da DRI, o intuito aqui √© somente agrupar informa√ßoes uteis para facilitar pesquisas.")
st.write("## ‚ö†Ô∏è ATEN√á√ÉO: Esse foi um esfor√ßo volunt√°rio de uma pessoa, e a qualidade de acesso √†s informa√ß√µes sobre as universidades pode variar muito. Portanto, sempre fa√ßa checagem dos fatos depois da sua pesquisa.")

# Se√ß√£o: Dicion√°rio de Dados
st.write("## üìñ Dicion√°rio de Dados")
with st.expander("Clique aqui para visualizar a descri√ß√£o das colunas üìö"):
    st.markdown("""
    - **Nome**: Nome da universidade.  
    - **Pa√≠s**: Pa√≠s onde a universidade est√° localizada.  
    - **Cidade**: Cidade onde a universidade est√° localizada.  
    - **Ranking_Internacional**: Posi√ß√£o da universidade no "QS World University Rankings". Caso n√£o haja informa√ß√£o sobre a universidade no ranking, o campo estar√° vazio. √â poss√≠vel que m√∫ltiplas universidades ocupem a mesma posi√ß√£o, pois algumas s√£o classificadas dentro de intervalos, como 1200-1400.  
    - **Linguas_Competencia**: N√≠vel de profici√™ncia em l√≠nguas exigido pela universidade para admiss√£o. Caso esteja vazio, n√£o h√° exig√™ncias lingu√≠sticas. || Significa Ou. 
    - **Taxas_Extras**: Informa√ß√µes sobre taxas adicionais cobradas pela universidade. Isso inclui apenas custos espec√≠ficos da institui√ß√£o, como "tuition fees" ou impostos regionais. N√£o cobre custos de vida, viagem ou vistos. "VRC" indica que o valor pode variar conforme o curso ou o semestre.  
    - **Cursos_em_Ingles**: Indica se a universidade oferece cursos em ingl√™s. "Sim" significa que todos os cursos dispon√≠veis para intercambistas s√£o ministrados em ingl√™s. "Parcial/Condicional" significa que apenas alguns cursos s√£o oferecidos nesse idioma ou est√£o dispon√≠veis apenas em determinados per√≠odos do ano. "N√£o" indica que a universidade n√£o oferece cursos em ingl√™s.  
    - **Auxilio_Monetario**: Informa√ß√µes sobre bolsas ou aux√≠lios financeiros dispon√≠veis. "Sim" significa que h√° aux√≠lio garantido e em valor suficiente. "Parcial/Condicional" significa que h√° algum aux√≠lio, mas ele pode ser insuficiente ou estar sujeito a condi√ß√µes, como bolsas de estudo espec√≠ficas. "N√£o" indica que a universidade n√£o oferece nenhum tipo de aux√≠lio financeiro. **Aten√ß√£o**: Este campo se refere apenas a aux√≠lios e bolsas oferecidos diretamente pela universidade. Programas de apoio do pa√≠s n√£o s√£o considerados aqui.  
    - **Auxilio_Moradia**: Informa√ß√µes sobre apoio e assist√™ncia com moradia. "Sim" significa que h√° moradias gratuitas e garantidas para intercambistas. "Parcial/Condicional" indica que a universidade oferece moradia, mas em quantidade limitada (portanto, n√£o garantida) ou que pode n√£o ser gratuita, mas com descontos para intercambistas. "N√£o" significa que n√£o h√° qualquer tipo de aux√≠lio, sendo responsabilidade do aluno encontrar moradia por conta pr√≥pria.  
    - **Data_Inspecao**: √öltima data de inspe√ß√£o ou atualiza√ß√£o das informa√ß√µes.  
    - **Link_Universidade**: Link para o site oficial da universidade. Sempre que poss√≠vel, o link leva diretamente √† p√°gina relacionada √† internacionaliza√ß√£o. Caso essa informa√ß√£o n√£o esteja dispon√≠vel, um link gen√©rico para o site da institui√ß√£o √© fornecido.  
    """)


# Se√ß√£o: Filtros

# Sele√ß√£o de colunas para ocultar
st.write("### Escolha as colunas que deseja ocultar:")
colunas_disponiveis = list(dados.columns)
colunas_ocultas = st.multiselect("Ocultar colunas:", colunas_disponiveis, default=[], key="filtro_colunas")

# Filtro por pa√≠s
st.write("### Escolha os pa√≠ses que deseja visualizar:")
paises = sorted(dados['Pa√≠s'].dropna().unique())
pais_selecionado = st.multiselect("Selecione um ou mais pa√≠ses:", paises, key="filtro_paises")

# Filtro por l√≠ngua de compet√™ncia
st.write("### Escolha as l√≠nguas de compet√™ncia desejadas:")
linguas_disponiveis = sorted(dados['Linguas_Competencia'].dropna().unique())
linguas_selecionadas = st.multiselect("Selecione uma ou mais l√≠nguas:", linguas_disponiveis, key="filtro_linguas")

# Op√ß√£o para incluir universidades sem informa√ß√£o de L√≠nguas de Compet√™ncia
incluir_sem_lingua = st.checkbox("Incluir universidades sem informa√ß√£o de L√≠nguas de Compet√™ncia", value=False, key="filtro_sem_lingua")

# Filtro por cursos em ingl√™s
st.write("### Escolha as op√ß√µes de cursos em ingl√™s desejadas:")
opcoes_cursos = ['Sim', 'Parcial/Condicional', 'N√£o']
cursos_ingles_selecionados = st.multiselect("Selecione as op√ß√µes desejadas:", opcoes_cursos, key="filtro_cursos_ingles")

# Filtro por Aux√≠lio Monet√°rio
st.write("### Escolha as op√ß√µes de aux√≠lio monet√°rio desejadas:")
opcoes_auxilio_monetario = ['Sim', 'Parcial/Condicional', 'N√£o']
auxilio_monetario_selecionado = st.multiselect("Selecione as op√ß√µes desejadas:", opcoes_auxilio_monetario, key="filtro_auxilio_monetario")

# Filtro por Aux√≠lio Moradia
st.write("### Escolha as op√ß√µes de aux√≠lio moradia desejadas:")
opcoes_auxilio_moradia = ['Sim', 'Parcial/Condicional', 'N√£o']
auxilio_moradia_selecionado = st.multiselect("Selecione as op√ß√µes desejadas:", opcoes_auxilio_moradia, key="filtro_auxilio_moradia")

# Ordena√ß√£o pelo ranking internacional
st.write("### Ordenar pelo Ranking Internacional")
ordenar_ranking = st.checkbox("Sim", value=False, key="filtro_ranking")

# Aplicando os filtros
df_filtrado = dados

if pais_selecionado:
    df_filtrado = df_filtrado[df_filtrado['Pa√≠s'].isin(pais_selecionado)]

if linguas_selecionadas:
    if incluir_sem_lingua:
        df_filtrado = df_filtrado[df_filtrado['Linguas_Competencia'].isin(linguas_selecionadas) | df_filtrado['Linguas_Competencia'].isna()]
    else:
        df_filtrado = df_filtrado[df_filtrado['Linguas_Competencia'].isin(linguas_selecionadas)]
elif incluir_sem_lingua:
    df_filtrado = df_filtrado[df_filtrado['Linguas_Competencia'].isna()]

if cursos_ingles_selecionados:
    df_filtrado = df_filtrado[df_filtrado['Cursos_em_Ingles'].isin(cursos_ingles_selecionados)]

if auxilio_monetario_selecionado:
    df_filtrado = df_filtrado[df_filtrado['Auxilio_Monetario'].isin(auxilio_monetario_selecionado)]

if auxilio_moradia_selecionado:
    df_filtrado = df_filtrado[df_filtrado['Auxilio_Moradia'].isin(auxilio_moradia_selecionado)]

if ordenar_ranking:
    df_filtrado = df_filtrado.sort_values(by='Ranking_Internacional', ascending=True)

# Removendo as colunas selecionadas para ocultar
df_exibido = df_filtrado.drop(columns=colunas_ocultas)

# Exibir tabela filtrada (agora √∫nica e din√¢mica)
st.write("### Dados Filtrados")
st.dataframe(df_exibido)

# Bot√£o para baixar os dados filtrados
st.download_button(
    label="Baixar Dados Filtrados",
    data=df_exibido.to_csv(index=False),
    file_name="Universidades_Filtradas.csv",
    mime="text/csv"
)
